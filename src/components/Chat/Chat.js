import React, { useEffect, useState } from "react";
import Scrollbars from "react-custom-scrollbars";
import BadgeLine from "./BadgeLine/BadgeLine";
import "./Chat.scss";
import MessageHeader from "./MessageHeader/MessageHeader";
import MessageInput from "./MessageInput/MessageInput";
import MessageItems from "./MessageItems/MessageItems";

const Chat = ({ selectedChat }) => {
  // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  const chatKey = selectedChat ? `chat_${selectedChat.id}` : null;
  const [messages, setMessages] = useState([]);

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞
  useEffect(() => {
    if (!chatKey) {
      setMessages([]); // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
      return;
    }

    try {
      const savedMessages = localStorage.getItem(chatKey);
      if (savedMessages) {
        setMessages(JSON.parse(savedMessages));
        console.log(
          `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatKey}:`,
          JSON.parse(savedMessages),
        );
      } else {
        setMessages([]); // –ù–æ–≤—ã–π —á–∞—Ç –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      setMessages([]); // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    }
  }, [chatKey]); // ‚úÖ –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º `chatKey`, –∞ –Ω–µ `selectedChat`

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (!chatKey) return; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    localStorage.setItem(chatKey, JSON.stringify(messages));
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatKey}:`, messages);
  }, [messages, chatKey]);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleSendMessage = (newMessage) => {
    setMessages((prevMessages) => {
      const updatedMessages = [
        ...prevMessages,
        { ...newMessage, id: Date.now() },
      ];
      return updatedMessages;
    });
  };

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const handleEditMessage = (id, newText) => {
    setMessages((prevMessages) =>
      prevMessages.map((msg) =>
        msg.id === id ? { ...msg, message: newText } : msg,
      ),
    );
  };

  // ‚úÖ –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!selectedChat) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-5">
        <p className="text-lg font-bold text-gray-600">
          Select a chat to start messaging
        </p>
      </div>
    );
  }

  return (
    <div className="chat">
      <MessageHeader selectedChat={selectedChat} />
      <BadgeLine text="Today" />
      <Scrollbars
        className="chat"
        style={{ height: "calc(100vh - 380px)" }}
        renderThumbVertical={(props) => (
          <div {...props} className="thumb-vertical" />
        )}
      >
        <div className="chat__messages">
          {messages.length === 0 ? (
            <div className="empty-container">
              <div className="empty-chat">
                <img
                  src="/no-messages.png"
                  alt="No messages"
                  className="empty-chat__image"
                />
                <p className="empty-chat__text">No messages here yet...</p>
                <p className="empty-chat__subtext">
                  Send a message or click on the greeting below
                </p>
              </div>
            </div>
          ) : (
            messages.map((message, index) => (
              <MessageItems
                key={message.id || index} // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º index, –µ—Å–ª–∏ message.id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                id={message.id || index} // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ id –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
                avatar={message.avatar}
                name={message.name}
                time={message.time}
                message={message.message}
                type={message.type}
                image={message.image}
                onEditMessage={handleEditMessage} // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              />
            ))
          )}
        </div>
      </Scrollbars>
      <MessageInput onSendMessage={handleSendMessage} />
    </div>
  );
};

export default Chat;
